package com.sgs.ics.model.bc.am;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Nov 22 09:18:46 IST 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SGSAppModuleImpl extends ApplicationModuleImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public SGSAppModuleImpl() {
    }
    private static final ADFLogger LOG = ADFLogger.createADFLogger(SGSAppModuleImpl.class);
    /**
     * @param seqName
     * @return sequence next value
     */
    public String getDBSequence(String seqName) {
        Connection conn = null;
        PreparedStatement pst = null;
        try {
            String connectionUrl =
                "jdbc:sqlserver://localhost;instanceName=MSSQLSERVER;databasename=SGSICO;integratedSecurity=true;";
           // jdbc:sqlserver://localhost;instanceName=MSSQLSERVER;databasename=SGSICO;integratedSecurity=true;
            conn = DriverManager.getConnection(connectionUrl);
            String sqlIdentifier = "select next value for " + seqName;
            pst = conn.prepareStatement(sqlIdentifier);

            ResultSet rs = pst.executeQuery();
            if (rs.next())
                rs.getInt(1);
            
            return rs.getString(1);
        } catch (SQLException sqle) {
            LOG.severe(sqle);
        } finally {
            try {
                conn.close();
                pst.close();
            } catch (SQLException e) {
                LOG.severe(e);
            }
        }
        return "0";
    }

    /**
     * Container's getter for SgsCostIdentificationRuleVO1.
     * @return SgsCostIdentificationRuleVO1
     */
    public ViewObjectImpl getSgsCostIdentificationRuleVO() {
        return (ViewObjectImpl) findViewObject("SgsCostIdentificationRuleVO");
    }

    /**
     * Container's getter for AllocationRuleVO1.
     * @return AllocationRuleVO1
     */
    public ViewObjectImpl getAllocationRuleVO() {
        return (ViewObjectImpl) findViewObject("AllocationRuleVO");
    }

    /**
     * Container's getter for CostIdentificationRuleToAllocationRulelink1.
     * @return CostIdentificationRuleToAllocationRulelink1
     */
    public ViewLinkImpl getCostIdentificationRuleToAllocationRulelink() {
        return (ViewLinkImpl) findViewLink("CostIdentificationRuleToAllocationRulelink");
    }

    /**
     * Container's getter for CrossChargeCombinationVO1.
     * @return CrossChargeCombinationVO1
     */
    public ViewObjectImpl getCrossChargeCombinationVO() {
        return (ViewObjectImpl) findViewObject("CrossChargeCombinationVO");
    }

    /**
     * Container's getter for CostIdentificationRuleToCrossChargeCombinationlink1.
     * @return CostIdentificationRuleToCrossChargeCombinationlink1
     */
    public ViewLinkImpl getCostIdentificationRuleToCrossChargeCombinationlink() {
        return (ViewLinkImpl) findViewLink("CostIdentificationRuleToCrossChargeCombinationlink");
    }

    /**
     * Container's getter for SgsCostIdentificationCombinationVO1.
     * @return SgsCostIdentificationCombinationVO1
     */
    public ViewObjectImpl getSgsCostIdentificationCombinationVO() {
        return (ViewObjectImpl) findViewObject("SgsCostIdentificationCombinationVO");
    }

    /**
     * Container's getter for CostIdentificationRuleToCostIdentificationCombinationlink1.
     * @return CostIdentificationRuleToCostIdentificationCombinationlink1
     */
    public ViewLinkImpl getCostIdentificationRuleToCostIdentificationCombinationlink() {
        return (ViewLinkImpl) findViewLink("CostIdentificationRuleToCostIdentificationCombinationlink");
    }
}

