package com.sgs.ics.model.bc.entity;

import com.asn1c.core.Null;

import com.sgs.ics.model.bc.am.SGSAppModuleImpl;

import com.sgs.ics.model.bc.commonutils.CommonUtils;

import java.math.BigDecimal;

import java.sql.Date;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Nov 28 13:03:31 IST 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SgsCostIdentificationRuleEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        CostIdentificationId,
        CostIdentificationName,
        NatureOfExpense,
        CostGroup,
        InvJournalGrpCode,
        DataSource,
        TrueUpDownApplicability,
        TrueUpDownFrequency,
        AccountingTreatment,
        ServiceCategory,
        AllocationBasis,
        InputProvider,
        EffectiveFrom,
        EffectiveTo,
        CreatedDate,
        CreatedBy,
        UpdatedDate,
        UpdatedBy,
        Attribute1,
        Attribute2,
        Attribute3,
        Attribute4,
        Attribute5,
        Attribute6,
        Attribute7,
        Attribute8,
        Attribute9,
        Attribute10,
        Attribute11,
        Attribute12,
        Attribute13,
        Attribute14,
        Attribute15,
        NONPERSONNELCOST,
        SACHSN,
        ADDTEXPENSECAT,
        CONCATEID,
        SgsCostOffsetCombinationEO,
        SgsCostTargetCombinationEO,
        SgsCostIdentificationCombinationEO;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    private static final ADFLogger LOG = ADFLogger.createADFLogger(SgsCostIdentificationRuleEOImpl.class);


    public static final int COSTIDENTIFICATIONID = AttributesEnum.CostIdentificationId.index();
    public static final int COSTIDENTIFICATIONNAME = AttributesEnum.CostIdentificationName.index();
    public static final int NATUREOFEXPENSE = AttributesEnum.NatureOfExpense.index();
    public static final int COSTGROUP = AttributesEnum.CostGroup.index();
    public static final int INVJOURNALGRPCODE = AttributesEnum.InvJournalGrpCode.index();
    public static final int DATASOURCE = AttributesEnum.DataSource.index();
    public static final int TRUEUPDOWNAPPLICABILITY = AttributesEnum.TrueUpDownApplicability.index();
    public static final int TRUEUPDOWNFREQUENCY = AttributesEnum.TrueUpDownFrequency.index();
    public static final int ACCOUNTINGTREATMENT = AttributesEnum.AccountingTreatment.index();
    public static final int SERVICECATEGORY = AttributesEnum.ServiceCategory.index();
    public static final int ALLOCATIONBASIS = AttributesEnum.AllocationBasis.index();
    public static final int INPUTPROVIDER = AttributesEnum.InputProvider.index();
    public static final int EFFECTIVEFROM = AttributesEnum.EffectiveFrom.index();
    public static final int EFFECTIVETO = AttributesEnum.EffectiveTo.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int ATTRIBUTE1 = AttributesEnum.Attribute1.index();
    public static final int ATTRIBUTE2 = AttributesEnum.Attribute2.index();
    public static final int ATTRIBUTE3 = AttributesEnum.Attribute3.index();
    public static final int ATTRIBUTE4 = AttributesEnum.Attribute4.index();
    public static final int ATTRIBUTE5 = AttributesEnum.Attribute5.index();
    public static final int ATTRIBUTE6 = AttributesEnum.Attribute6.index();
    public static final int ATTRIBUTE7 = AttributesEnum.Attribute7.index();
    public static final int ATTRIBUTE8 = AttributesEnum.Attribute8.index();
    public static final int ATTRIBUTE9 = AttributesEnum.Attribute9.index();
    public static final int ATTRIBUTE10 = AttributesEnum.Attribute10.index();
    public static final int ATTRIBUTE11 = AttributesEnum.Attribute11.index();
    public static final int ATTRIBUTE12 = AttributesEnum.Attribute12.index();
    public static final int ATTRIBUTE13 = AttributesEnum.Attribute13.index();
    public static final int ATTRIBUTE14 = AttributesEnum.Attribute14.index();
    public static final int ATTRIBUTE15 = AttributesEnum.Attribute15.index();
    public static final int NONPERSONNELCOST = AttributesEnum.NONPERSONNELCOST.index();
    public static final int SACHSN = AttributesEnum.SACHSN.index();
    public static final int ADDTEXPENSECAT = AttributesEnum.ADDTEXPENSECAT.index();
    public static final int CONCATEID = AttributesEnum.CONCATEID.index();
    public static final int SGSCOSTOFFSETCOMBINATIONEO = AttributesEnum.SgsCostOffsetCombinationEO.index();
    public static final int SGSCOSTTARGETCOMBINATIONEO = AttributesEnum.SgsCostTargetCombinationEO.index();
    public static final int SGSCOSTIDENTIFICATIONCOMBINATIONEO =
        AttributesEnum.SgsCostIdentificationCombinationEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SgsCostIdentificationRuleEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.sgs.ics.model.bc.entity.SgsCostIdentificationRuleEO");
    }


    /**
     * Gets the attribute value for CostIdentificationId, using the alias name CostIdentificationId.
     * @return the value of CostIdentificationId
     */
    public String getCostIdentificationId() {
        return (String) getAttributeInternal(COSTIDENTIFICATIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CostIdentificationId.
     * @param value value to set the CostIdentificationId
     */
    public void setCostIdentificationId(String value) {
        setAttributeInternal(COSTIDENTIFICATIONID, value);
    }

    /**
     * Gets the attribute value for CostIdentificationName, using the alias name CostIdentificationName.
     * @return the value of CostIdentificationName
     */
    public String getCostIdentificationName() {
        return (String) getAttributeInternal(COSTIDENTIFICATIONNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for CostIdentificationName.
     * @param value value to set the CostIdentificationName
     */
    public void setCostIdentificationName(String value) {
        setAttributeInternal(COSTIDENTIFICATIONNAME, value);
    }

    /**
     * Gets the attribute value for NatureOfExpense, using the alias name NatureOfExpense.
     * @return the value of NatureOfExpense
     */
    public String getNatureOfExpense() {
        return (String) getAttributeInternal(NATUREOFEXPENSE);
    }

    /**
     * Sets <code>value</code> as the attribute value for NatureOfExpense.
     * @param value value to set the NatureOfExpense
     */
    public void setNatureOfExpense(String value) {
        setAttributeInternal(NATUREOFEXPENSE, value);
    }

    /**
     * Gets the attribute value for CostGroup, using the alias name CostGroup.
     * @return the value of CostGroup
     */
    public String getCostGroup() {
        return (String) getAttributeInternal(COSTGROUP);
    }

    /**
     * Sets <code>value</code> as the attribute value for CostGroup.
     * @param value value to set the CostGroup
     */
    public void setCostGroup(String value) {
        setAttributeInternal(COSTGROUP, value);
    }

    /**
     * Gets the attribute value for InvJournalGrpCode, using the alias name InvJournalGrpCode.
     * @return the value of InvJournalGrpCode
     */
    public String getInvJournalGrpCode() {
        return (String) getAttributeInternal(INVJOURNALGRPCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for InvJournalGrpCode.
     * @param value value to set the InvJournalGrpCode
     */
    public void setInvJournalGrpCode(String value) {
        setAttributeInternal(INVJOURNALGRPCODE, value);
    }

    /**
     * Gets the attribute value for DataSource, using the alias name DataSource.
     * @return the value of DataSource
     */
    public String getDataSource() {
        return (String) getAttributeInternal(DATASOURCE);
    }

    /**
     * Sets <code>value</code> as the attribute value for DataSource.
     * @param value value to set the DataSource
     */
    public void setDataSource(String value) {
        setAttributeInternal(DATASOURCE, value);
    }

    /**
     * Gets the attribute value for TrueUpDownApplicability, using the alias name TrueUpDownApplicability.
     * @return the value of TrueUpDownApplicability
     */
    public String getTrueUpDownApplicability() {
        return (String) getAttributeInternal(TRUEUPDOWNAPPLICABILITY);
    }

    /**
     * Sets <code>value</code> as the attribute value for TrueUpDownApplicability.
     * @param value value to set the TrueUpDownApplicability
     */
    public void setTrueUpDownApplicability(String value) {
        setAttributeInternal(TRUEUPDOWNAPPLICABILITY, value);
    }

    /**
     * Gets the attribute value for TrueUpDownFrequency, using the alias name TrueUpDownFrequency.
     * @return the value of TrueUpDownFrequency
     */
    public String getTrueUpDownFrequency() {
        return (String) getAttributeInternal(TRUEUPDOWNFREQUENCY);
    }

    /**
     * Sets <code>value</code> as the attribute value for TrueUpDownFrequency.
     * @param value value to set the TrueUpDownFrequency
     */
    public void setTrueUpDownFrequency(String value) {
        setAttributeInternal(TRUEUPDOWNFREQUENCY, value);
    }

    /**
     * Gets the attribute value for AccountingTreatment, using the alias name AccountingTreatment.
     * @return the value of AccountingTreatment
     */
    public String getAccountingTreatment() {
        return (String) getAttributeInternal(ACCOUNTINGTREATMENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for AccountingTreatment.
     * @param value value to set the AccountingTreatment
     */
    public void setAccountingTreatment(String value) {
        setAttributeInternal(ACCOUNTINGTREATMENT, value);
    }

    /**
     * Gets the attribute value for ServiceCategory, using the alias name ServiceCategory.
     * @return the value of ServiceCategory
     */
    public String getServiceCategory() {
        return (String) getAttributeInternal(SERVICECATEGORY);
    }

    /**
     * Sets <code>value</code> as the attribute value for ServiceCategory.
     * @param value value to set the ServiceCategory
     */
    public void setServiceCategory(String value) {
        setAttributeInternal(SERVICECATEGORY, value);
    }

    /**
     * Gets the attribute value for AllocationBasis, using the alias name AllocationBasis.
     * @return the value of AllocationBasis
     */
    public String getAllocationBasis() {
        return (String) getAttributeInternal(ALLOCATIONBASIS);
    }

    /**
     * Sets <code>value</code> as the attribute value for AllocationBasis.
     * @param value value to set the AllocationBasis
     */
    public void setAllocationBasis(String value) {
        setAttributeInternal(ALLOCATIONBASIS, value);
    }

    /**
     * Gets the attribute value for InputProvider, using the alias name InputProvider.
     * @return the value of InputProvider
     */
    public String getInputProvider() {
        return (String) getAttributeInternal(INPUTPROVIDER);
    }

    /**
     * Sets <code>value</code> as the attribute value for InputProvider.
     * @param value value to set the InputProvider
     */
    public void setInputProvider(String value) {
        setAttributeInternal(INPUTPROVIDER, value);
    }

    /**
     * Gets the attribute value for EffectiveFrom, using the alias name EffectiveFrom.
     * @return the value of EffectiveFrom
     */
    public Date getEffectiveFrom() {
        return (Date) getAttributeInternal(EFFECTIVEFROM);
    }

    /**
     * Sets <code>value</code> as the attribute value for EffectiveFrom.
     * @param value value to set the EffectiveFrom
     */
    public void setEffectiveFrom(Date value) {
        setAttributeInternal(EFFECTIVEFROM, value);
    }

    /**
     * Gets the attribute value for EffectiveTo, using the alias name EffectiveTo.
     * @return the value of EffectiveTo
     */
    public Date getEffectiveTo() {
        return (Date) getAttributeInternal(EFFECTIVETO);
    }

    /**
     * Sets <code>value</code> as the attribute value for EffectiveTo.
     * @param value value to set the EffectiveTo
     */
    public void setEffectiveTo(Date value) {
        setAttributeInternal(EFFECTIVETO, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Date getCreatedDate() {
        return (Date) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }
    
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Date getUpdatedDate() {
        return (Date) getAttributeInternal(UPDATEDDATE);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public String getUpdatedBy() {
        return (String) getAttributeInternal(UPDATEDBY);
    }
    
    public void setUpdatedBy(String value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for Attribute1, using the alias name Attribute1.
     * @return the value of Attribute1
     */
    public String getAttribute1() {
        return (String) getAttributeInternal(ATTRIBUTE1);
    }

    /**
     * Sets <code>value</code> as the attribute value for Attribute1.
     * @param value value to set the Attribute1
     */
    public void setAttribute1(String value) {
        setAttributeInternal(ATTRIBUTE1, value);
    }

    /**
     * Gets the attribute value for Attribute2, using the alias name Attribute2.
     * @return the value of Attribute2
     */
    public String getAttribute2() {
        return (String) getAttributeInternal(ATTRIBUTE2);
    }

    /**
     * Sets <code>value</code> as the attribute value for Attribute2.
     * @param value value to set the Attribute2
     */
    public void setAttribute2(String value) {
        setAttributeInternal(ATTRIBUTE2, value);
    }

    /**
     * Gets the attribute value for Attribute3, using the alias name Attribute3.
     * @return the value of Attribute3
     */
    public String getAttribute3() {
        return (String) getAttributeInternal(ATTRIBUTE3);
    }

    /**
     * Sets <code>value</code> as the attribute value for Attribute3.
     * @param value value to set the Attribute3
     */
    public void setAttribute3(String value) {
        setAttributeInternal(ATTRIBUTE3, value);
    }

    /**
     * Gets the attribute value for Attribute4, using the alias name Attribute4.
     * @return the value of Attribute4
     */
    public String getAttribute4() {
        return (String) getAttributeInternal(ATTRIBUTE4);
    }

    /**
     * Sets <code>value</code> as the attribute value for Attribute4.
     * @param value value to set the Attribute4
     */
    public void setAttribute4(String value) {
        setAttributeInternal(ATTRIBUTE4, value);
    }

    /**
     * Gets the attribute value for Attribute5, using the alias name Attribute5.
     * @return the value of Attribute5
     */
    public String getAttribute5() {
        return (String) getAttributeInternal(ATTRIBUTE5);
    }

    /**
     * Sets <code>value</code> as the attribute value for Attribute5.
     * @param value value to set the Attribute5
     */
    public void setAttribute5(String value) {
        setAttributeInternal(ATTRIBUTE5, value);
    }

    /**
     * Gets the attribute value for Attribute6, using the alias name Attribute6.
     * @return the value of Attribute6
     */
    public Date getAttribute6() {
        return (Date) getAttributeInternal(ATTRIBUTE6);
    }

    /**
     * Sets <code>value</code> as the attribute value for Attribute6.
     * @param value value to set the Attribute6
     */
    public void setAttribute6(Date value) {
        setAttributeInternal(ATTRIBUTE6, value);
    }

    /**
     * Gets the attribute value for Attribute7, using the alias name Attribute7.
     * @return the value of Attribute7
     */
    public Date getAttribute7() {
        return (Date) getAttributeInternal(ATTRIBUTE7);
    }

    /**
     * Sets <code>value</code> as the attribute value for Attribute7.
     * @param value value to set the Attribute7
     */
    public void setAttribute7(Date value) {
        setAttributeInternal(ATTRIBUTE7, value);
    }

    /**
     * Gets the attribute value for Attribute8, using the alias name Attribute8.
     * @return the value of Attribute8
     */
    public Date getAttribute8() {
        return (Date) getAttributeInternal(ATTRIBUTE8);
    }

    /**
     * Sets <code>value</code> as the attribute value for Attribute8.
     * @param value value to set the Attribute8
     */
    public void setAttribute8(Date value) {
        setAttributeInternal(ATTRIBUTE8, value);
    }

    /**
     * Gets the attribute value for Attribute9, using the alias name Attribute9.
     * @return the value of Attribute9
     */
    public Date getAttribute9() {
        return (Date) getAttributeInternal(ATTRIBUTE9);
    }

    /**
     * Sets <code>value</code> as the attribute value for Attribute9.
     * @param value value to set the Attribute9
     */
    public void setAttribute9(Date value) {
        setAttributeInternal(ATTRIBUTE9, value);
    }

    /**
     * Gets the attribute value for Attribute10, using the alias name Attribute10.
     * @return the value of Attribute10
     */
    public Date getAttribute10() {
        return (Date) getAttributeInternal(ATTRIBUTE10);
    }

    /**
     * Sets <code>value</code> as the attribute value for Attribute10.
     * @param value value to set the Attribute10
     */
    public void setAttribute10(Date value) {
        setAttributeInternal(ATTRIBUTE10, value);
    }

    /**
     * Gets the attribute value for Attribute11, using the alias name Attribute11.
     * @return the value of Attribute11
     */
    public BigDecimal getAttribute11() {
        return (BigDecimal) getAttributeInternal(ATTRIBUTE11);
    }

    /**
     * Sets <code>value</code> as the attribute value for Attribute11.
     * @param value value to set the Attribute11
     */
    public void setAttribute11(BigDecimal value) {
        setAttributeInternal(ATTRIBUTE11, value);
    }

    /**
     * Gets the attribute value for Attribute12, using the alias name Attribute12.
     * @return the value of Attribute12
     */
    public BigDecimal getAttribute12() {
        return (BigDecimal) getAttributeInternal(ATTRIBUTE12);
    }

    /**
     * Sets <code>value</code> as the attribute value for Attribute12.
     * @param value value to set the Attribute12
     */
    public void setAttribute12(BigDecimal value) {
        setAttributeInternal(ATTRIBUTE12, value);
    }

    /**
     * Gets the attribute value for Attribute13, using the alias name Attribute13.
     * @return the value of Attribute13
     */
    public BigDecimal getAttribute13() {
        return (BigDecimal) getAttributeInternal(ATTRIBUTE13);
    }

    /**
     * Sets <code>value</code> as the attribute value for Attribute13.
     * @param value value to set the Attribute13
     */
    public void setAttribute13(BigDecimal value) {
        setAttributeInternal(ATTRIBUTE13, value);
    }

    /**
     * Gets the attribute value for Attribute14, using the alias name Attribute14.
     * @return the value of Attribute14
     */
    public BigDecimal getAttribute14() {
        return (BigDecimal) getAttributeInternal(ATTRIBUTE14);
    }

    /**
     * Sets <code>value</code> as the attribute value for Attribute14.
     * @param value value to set the Attribute14
     */
    public void setAttribute14(BigDecimal value) {
        setAttributeInternal(ATTRIBUTE14, value);
    }

    /**
     * Gets the attribute value for Attribute15, using the alias name Attribute15.
     * @return the value of Attribute15
     */
    public BigDecimal getAttribute15() {
        return (BigDecimal) getAttributeInternal(ATTRIBUTE15);
    }

    /**
     * Sets <code>value</code> as the attribute value for Attribute15.
     * @param value value to set the Attribute15
     */
    public void setAttribute15(BigDecimal value) {
        setAttributeInternal(ATTRIBUTE15, value);
    }

    /**
     * Gets the attribute value for NONPERSONNELCOST, using the alias name NONPERSONNELCOST.
     * @return the value of NONPERSONNELCOST
     */
    public BigDecimal getNONPERSONNELCOST() {
        return (BigDecimal) getAttributeInternal(NONPERSONNELCOST);
    }

    /**
     * Sets <code>value</code> as the attribute value for NONPERSONNELCOST.
     * @param value value to set the NONPERSONNELCOST
     */
    public void setNONPERSONNELCOST(BigDecimal value) {
        setAttributeInternal(NONPERSONNELCOST, value);
    }


    /**
     * Gets the attribute value for SACHSN, using the alias name SACHSN.
     * @return the value of SACHSN
     */
    public String getSACHSN() {
        return (String) getAttributeInternal(SACHSN);
    }

    /**
     * Sets <code>value</code> as the attribute value for SACHSN.
     * @param value value to set the SACHSN
     */
    public void setSACHSN(String value) {
        setAttributeInternal(SACHSN, value);
    }

    /**
     * Gets the attribute value for ADDTEXPENSECAT, using the alias name ADDTEXPENSECAT.
     * @return the value of ADDTEXPENSECAT
     */
    public String getADDTEXPENSECAT() {
        return (String) getAttributeInternal(ADDTEXPENSECAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ADDTEXPENSECAT.
     * @param value value to set the ADDTEXPENSECAT
     */
    public void setADDTEXPENSECAT(String value) {
        setAttributeInternal(ADDTEXPENSECAT, value);
    }

    /**
     * Gets the attribute value for CONCATEID, using the alias name CONCATEID.
     * @return the value of CONCATEID
     */
    public String getCONCATEID() {
        return (String) getAttributeInternal(CONCATEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CONCATEID.
     * @param value value to set the CONCATEID
     */
    public void setCONCATEID(String value) {
        setAttributeInternal(CONCATEID, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getSgsCostTargetCombinationEO() {
        return (RowIterator) getAttributeInternal(SGSCOSTTARGETCOMBINATIONEO);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getSgsCostIdentificationCombinationEO() {
        return (RowIterator) getAttributeInternal(SGSCOSTIDENTIFICATIONCOMBINATIONEO);
    }


    /**
     * @param costIdentificationId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String costIdentificationId) {
        return new Key(new Object[] { costIdentificationId });
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getSgsCostOffsetCombinationEO() {
        return (RowIterator) getAttributeInternal(SGSCOSTOFFSETCOMBINATIONEO);
    }


    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        try {
            SGSAppModuleImpl am = new SGSAppModuleImpl();
            //setCostIdentificationId("SGSID"+Math.random());
            setCostIdentificationId("CIR"+am.getDBSequence("SEQ_SGS_COST_IDENTIFICATION_RULE"));
            CommonUtils util = new CommonUtils();
            Object user = (Object) util.getSessionScopeValue("_username").toString();
            setCreatedBy(user.toString());
            
        } catch (Exception e) {
            LOG.severe(e);
        }
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_UPDATE) {
            CommonUtils util = new CommonUtils();
            Object user = (Object) util.getSessionScopeValue("_username").toString();
            setUpdatedBy(user.toString());
            System.out.println("ConcateID**** "+getNatureOfExpense()+getInputProvider()+getADDTEXPENSECAT());
            String natureOfExpense="";
            String inputProvider="";
            String addExpenseQuilfier="";
            if(getNatureOfExpense() != null){
                natureOfExpense = getNatureOfExpense().toUpperCase().replaceAll("\\s", "");
            }
            if(getInputProvider() != null){
                inputProvider = getInputProvider().toUpperCase().replaceAll("\\s", "");
            }
            if(getADDTEXPENSECAT() != null){
                addExpenseQuilfier = getADDTEXPENSECAT().toUpperCase().replaceAll("\\s", "");
            }else{
                addExpenseQuilfier = natureOfExpense;
            }
            setCONCATEID(natureOfExpense+inputProvider+addExpenseQuilfier);
        }else if (operation == DML_INSERT) {
            System.out.println("ConcateID**** "+getNatureOfExpense()+getInputProvider()+getADDTEXPENSECAT());
            String natureOfExpense="";
            String inputProvider="";
            String addExpenseQuilfier="";
            if(getNatureOfExpense() != null){
                natureOfExpense = getNatureOfExpense().toUpperCase().replaceAll("\\s", "");
            }
            if(getInputProvider() != null){
                inputProvider = getInputProvider().toUpperCase().replaceAll("\\s", "");
            }
            if(getADDTEXPENSECAT() != null){
                addExpenseQuilfier = getADDTEXPENSECAT().toUpperCase().replaceAll("\\s", "");
            }else{
                addExpenseQuilfier = natureOfExpense;
            }   
            setCONCATEID(natureOfExpense+inputProvider+addExpenseQuilfier);
        }

        super.doDML(operation, e);
    }
    
    public void updateConcateData() {
        
    }
}

